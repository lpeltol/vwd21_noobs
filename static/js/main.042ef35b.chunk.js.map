{"version":3,"sources":["components/HelloWorld/HelloWorld.js","components/WebCam/WebCam.js","App.js","index.js"],"names":["onClickHandler","console","log","HelloWorld","className","onClick","WebCam","useState","predictions","setPredictions","video","setVideo","undefined","model","setModel","useEffect","handTrack","flipHorizontal","imageScaleFactor","maxNumBoxes","iouThreshold","scoreThreshold","then","document","querySelector","width","height","navigator","mediaDevices","getUserMedia","stream","srcObject","catch","error","StreamVideo","id","Fragment","autoPlay","detect","draw","bbox","r","canvas","ctx","getContext","videoHeight","videoWidth","clearRect","drawImage","beginPath","lineWidth","strokeStyle","rect","stroke","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"yeAGMA,G,qBAAiB,WACrBC,QAAQC,IAAI,WAGDC,EAAa,WACxB,OACE,gCACE,oBAAIC,UAAU,SAAd,0BACA,wBAAQC,QAASL,EAAgBI,UAAU,SAA3C,uB,0BCaOE,EAAS,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACnBC,EADmB,KACNC,EADM,OAEAF,mBAAS,IAFT,mBAEnBG,EAFmB,KAEZC,EAFY,OAGAJ,wBAASK,GAHT,mBAGnBC,EAHmB,KAGZC,EAHY,KAK1Bb,QAAQC,IAAI,eAAZ,OAA4BM,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAc,IAC1CO,qBAAU,WAQRC,IAPoB,CAClBC,gBAAgB,EAChBC,iBAAkB,EAClBC,YAAa,GACbC,aAAc,GACdC,eAAgB,MAEUC,MAAK,SAACT,GAChCC,EAASD,GACTF,EAlCc,WAClB,IAAID,EAAQa,SAASC,cAAc,UAcnC,OAbAd,EAAMe,MAJK,IAKXf,EAAMgB,OALK,IAMPC,UAAUC,aAAaC,eACzB5B,QAAQC,IAAIyB,UAAUC,aAAaC,cACnCF,UAAUC,aACPC,aAAa,CAAEnB,OAAO,IACtBY,MAAK,SAAUQ,GACdpB,EAAMqB,UAAYD,KAEnBE,OAAM,SAAUC,GACfhC,QAAQC,IAAI,6BAGXQ,EAmBMwB,SAEV,IAcH,OACE,qBAAKC,GAAG,YAAR,SACGtB,EACC,eAAC,IAAMuB,SAAP,WACE,uBAAOC,UAAU,EAAMF,GAAG,UAC1B,wBAAQ9B,QAjBD,SAATiC,IACJzB,EAAMyB,OAAO5B,GAAOY,MAAK,SAACd,GAIQ,IAAD,GAF/BC,EAAeD,QAEKI,IAAhBJ,IACF+B,EAAI,UAAC/B,EAAY,UAAb,aAAC,EAAgBgC,KAAM9B,GAE7B4B,QASI,0BACA,wBAAQH,GAAG,gBAGb,oDAMFI,EAAO,SAACE,EAAG/B,GACf,QAAUE,IAAN6B,EAAiB,CACnB,IAAIC,EAASnB,SAASC,cAAc,UAChCmB,EAAMD,EAAOE,WAAW,MAC5BF,EAAOhB,OAAShB,EAAMmC,YACtBH,EAAOjB,MAAQf,EAAMoC,WACrBH,EAAII,UAAU,EAAG,EAAGL,EAAOjB,MAAOiB,EAAOhB,QACzCiB,EAAIK,UAAUtC,EAAO,EAAG,GACxBiC,EAAIM,YACJN,EAAIO,UAAY,EAChBP,EAAIQ,YAAc,MAClBR,EAAIS,KAAKX,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,IAC7BE,EAAIU,WCtEOC,MATf,WACE,OACE,sBAAKlD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCHNmD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASmC,eAAe,W","file":"static/js/main.042ef35b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./HelloWorld.css\";\r\n\r\nconst onClickHandler = () => {\r\n  console.log(\"Hello\");\r\n};\r\n\r\nexport const HelloWorld = () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"Header\">Hello world!</h1>\r\n      <button onClick={onClickHandler} className=\"Button\">\r\n        Hello\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./WebCam.css\";\r\nimport * as handTrack from \"handtrackjs\";\r\n\r\nconst SIZE = 500;\r\n\r\nconst StreamVideo = () => {\r\n  var video = document.querySelector(\"#video\");\r\n  video.width = SIZE;\r\n  video.height = SIZE;\r\n  if (navigator.mediaDevices.getUserMedia) {\r\n    console.log(navigator.mediaDevices.getUserMedia);\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true })\r\n      .then(function (stream) {\r\n        video.srcObject = stream;\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Something went wrong!\");\r\n      });\r\n  }\r\n  return video;\r\n};\r\n\r\nexport const WebCam = () => {\r\n  const [predictions, setPredictions] = useState([]);\r\n  const [video, setVideo] = useState({});\r\n  const [model, setModel] = useState(undefined);\r\n\r\n  console.log(\"Predictions:\", predictions?.[0]);\r\n  useEffect(() => {\r\n    const modelParams = {\r\n      flipHorizontal: false, // flip e.g for video\r\n      imageScaleFactor: 1, // reduce input image size .\r\n      maxNumBoxes: 20, // maximum number of boxes to detect\r\n      iouThreshold: 0.5, // ioU threshold for non-max suppression\r\n      scoreThreshold: 0.85, // confidence threshold for predictions.\r\n    };\r\n    handTrack.load(modelParams).then((model) => {\r\n      setModel(model);\r\n      setVideo(StreamVideo());\r\n    });\r\n  }, []);\r\n\r\n  const detect = () => {\r\n    model.detect(video).then((predictions) => {\r\n      //setPredictions((oldPredictions) => [...oldPredictions, predictions]);\r\n      setPredictions(predictions);\r\n\r\n      if (predictions !== undefined) {\r\n        draw(predictions[0]?.bbox, video);\r\n      }\r\n      detect();\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div id=\"container\">\r\n      {model ? (\r\n        <React.Fragment>\r\n          <video autoPlay={true} id=\"video\"></video>\r\n          <button onClick={detect}>Predict Pose</button>\r\n          <canvas id=\"myCanvas\"></canvas>\r\n        </React.Fragment>\r\n      ) : (\r\n        <span>Loading model</span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst draw = (r, video) => {\r\n  if (r !== undefined) {\r\n    var canvas = document.querySelector(\"canvas\");\r\n    var ctx = canvas.getContext(\"2d\");\r\n    canvas.height = video.videoHeight;\r\n    canvas.width = video.videoWidth;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.drawImage(video, 0, 0);\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 4;\r\n    ctx.strokeStyle = \"red\";\r\n    ctx.rect(r[0], r[1], r[2], r[3]);\r\n    ctx.stroke();\r\n  }\r\n};\r\n","import \"./App.css\";\r\nimport { HelloWorld } from \"./components/HelloWorld/HelloWorld\";\r\nimport { WebCam } from \"./components/WebCam/WebCam\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HelloWorld />\r\n      <WebCam />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}